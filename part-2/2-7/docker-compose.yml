# Exercise 2.7
# Postgres image uses a volume by default. Define manually a volume for the database in a convenient location such as in ./database so you should use now a bind mount. The image documentation may help you with the task.
# After you have configured the bind mount volume:
#     Save a few messages through the frontend
#     Run docker compose down
#     Run docker compose up and see that the messages are available after refreshing browser
#     Run docker compose down and delete the volume folder manually
#     Run docker compose up and the data should be gone
#     TIP: To save you the trouble of testing all of those steps, just look into the folder before trying the steps. If it's empty after docker compose up then something is wrong.
# Submit the docker-compose.yml

version: '3.8'

services:
  example-backend:
    image: example-backend
    ports:
      - 8080:8080
    environment:
      - FRONT_URL=http://localhost:5000
      - POSTGRES_HOST=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DATABASE=backend

  example-frontend:
    image: example-frontend
    ports:
      - 5000:5000
    environment:
      - API_URL=http://localhost:8080

  postgres:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=secret
      - POSTGRES_USER=postgres
      - POSTGRES_DB=backend

    volumes:
      - ./database:/var/lib/postgresql/data
